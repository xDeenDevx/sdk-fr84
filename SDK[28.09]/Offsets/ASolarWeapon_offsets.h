namespace offsets
{
	namespace ASolarWeapon
	{
			constexpr auto OnWeaponUnhold = 0x378; // Size: 16, Type: struct FMulticastInlineDelegate
			constexpr auto WeaponState = 0x388; // Size: 80, Type: struct FWeaponMechanicalState
			constexpr auto PrimaryShootingOption = 0x3d9; // Size: 1, Type: enum class EShootingOpt
			constexpr auto ImpactInfo = 0x3dc; // Size: 16, Type: struct FImpactDisplayInfo
			constexpr auto DefaultDamageType = 0x3f8; // Size: 1, Type: enum class ESCMDamageType
			constexpr auto VirtualBulletCollector = 0x400; // Size: 8, Type: struct USolarVirtualBulletCollector*
			constexpr auto LaserCollector = 0x408; // Size: 8, Type: struct UWeaponFireLaserCollector*
			constexpr auto ExtraPoints = 0x414; // Size: 4, Type: int32_t
			constexpr auto ExtraPointsForInit = 0x418; // Size: 4, Type: int32_t
			constexpr auto bUseSkillStateMachine = 0x41c; // Size: 1, Type: bool
			constexpr auto ExtraPointsLimit = 0x420; // Size: 4, Type: int32_t
			constexpr auto SecModeLimitTypeID = 0x424; // Size: 4, Type: int32_t
			constexpr auto RestoreProgressPerSec = 0x428; // Size: 4, Type: float
			constexpr auto RestoreProgressPerKill = 0x438; // Size: 4, Type: float
			constexpr auto RestoreProgressPerDmg = 0x43c; // Size: 4, Type: float
			constexpr auto RestoreProgressAccumulation = 0x440; // Size: 4, Type: float
			constexpr auto RestoreProgressAccumulationForInit = 0x444; // Size: 4, Type: float
			constexpr auto FireModeIndex = 0x451; // Size: 1, Type: char
			constexpr auto OverloadState = 0x464; // Size: 1, Type: enum class EWeaponOverloadState
			constexpr auto OverloadAccum = 0x468; // Size: 4, Type: float
			constexpr auto OverloadCurve = 0x478; // Size: 8, Type: struct UCurveFloat*
			constexpr auto GatlingRollSpeed = 0x484; // Size: 4, Type: float
			constexpr auto GatlingHoldTime = 0x488; // Size: 4, Type: float
			constexpr auto GatlingRollSpeedInterp = 0x48c; // Size: 4, Type: float
			constexpr auto GatlingRepState = 0x490; // Size: 4, Type: int32_t
			constexpr auto FireChargingTime = 0x4b8; // Size: 4, Type: float
			constexpr auto FireChargingPhase = 0x4bc; // Size: 4, Type: int32_t
			constexpr auto FireChargingSumTime = 0x4c0; // Size: 4, Type: float
			constexpr auto ChargeAnimationRate = 0x4cc; // Size: 4, Type: float
			constexpr auto ChargingEffect = 0x4d0; // Size: 8, Type: UGameplayEffect*
			constexpr auto OwnerGAS = 0x4e0; // Size: 8, Type: struct TWeakObjectPtr<UAbilitySystemComponent>
			constexpr auto NormalOverloadCoolingCurve = 0x4f0; // Size: 8, Type: struct UCurveFloat*
			constexpr auto CurrentMode = 0x4f8; // Size: 4, Type: int32_t
			constexpr auto FireModes = 0x508; // Size: 16, Type: struct TArray<struct FFireMode>
			constexpr auto WeaponHolder = 0x518; // Size: 8, Type: struct AActor*
			constexpr auto ControlWeaponCharacter = 0x520; // Size: 8, Type: struct ASolarCharacterBase*
			constexpr auto EquippedAbilityHandles = 0x528; // Size: 16, Type: struct TArray<struct FGameplayAbilitySpecHandle>
			constexpr auto bControlWeaponCharacterChanged = 0x538; // Size: 1, Type: bool
			constexpr auto AimTarget = 0x540; // Size: 8, Type: struct AActor*
			constexpr auto ProjSplineClass = 0x548; // Size: 8, Type: ASolarWeaponProjectileSpline*
			constexpr auto ProjSpline = 0x550; // Size: 8, Type: struct ASolarWeaponProjectileSpline*
			constexpr auto ShootingOptArray = 0x558; // Size: 16, Type: struct TArray<enum class EShootingOpt>
			constexpr auto bShowSpecialEffect = 0x568; // Size: 1, Type: bool
			constexpr auto Config = 0x570; // Size: 8, Type: struct USingleWeaponConfig*
			constexpr auto WeaponIcon = 0x578; // Size: 8, Type: struct UTexture2D*
			constexpr auto PrimaryFireBtnStyle = 0x580; // Size: 8, Type: struct USlateWidgetStyleAsset*
			constexpr auto SecondaryFireBtnStyle = 0x588; // Size: 8, Type: struct USlateWidgetStyleAsset*
			constexpr auto WeaponsConfig = 0x590; // Size: 8, Type: struct UGlobalWeaponConfig*
			constexpr auto RecoilComponent = 0x598; // Size: 8, Type: struct UWeaponRecoilComponent*
			constexpr auto weaponid = 0x5a0; // Size: 4, Type: int32_t
			constexpr auto SpreadAndRecoil = 0x5a8; // Size: 8, Type: struct UWeaponSpreadAndRecoil*
			constexpr auto bTeamDamageEnable = 0x5bc; // Size: 1, Type: bool
			constexpr auto bInfiniteAmmo = 0x5bd; // Size: 1, Type: bool
			constexpr auto bInfinitePackageAmmo = 0x5be; // Size: 1, Type: bool
			constexpr auto ExtraAmmo = 0x5c0; // Size: 4, Type: int32_t
			constexpr auto LoopParticlesMap = 0x5c8; // Size: 80, Type: struct TMap<struct TWeakObjectPtr<UParticleSystem>, struct UParticleLoopListener*>
			constexpr auto CurrentClipAmmo = 0x618; // Size: 4, Type: int32_t
			constexpr auto WeaponAnimationMap = 0x728; // Size: 80, Type: struct TMap<enum class ECharacterMontage, struct FWeaponAnimationInfo>
			constexpr auto bResetMuzzleIndexWhenStopFire = 0x778; // Size: 1, Type: bool
			constexpr auto WeaponFireCameraShakes = 0x788; // Size: 16, Type: struct TArray<struct FCameraShakeData>
			constexpr auto WeaponScopeFireCameraShakes = 0x798; // Size: 16, Type: struct TArray<struct FCameraShakeData>
			constexpr auto UsingSkillCameraShakes = 0x7a8; // Size: 16, Type: struct TArray<struct FCameraShakeData>
			constexpr auto WeaponChargingCameraShakes = 0x7b8; // Size: 16, Type: struct TArray<struct FCameraShakeData>
			constexpr auto bUseEmptyActor = 0x7c8; // Size: 1, Type: bool
			constexpr auto FightMeshPath = 0x7d0; // Size: 24, Type: struct FSoftObjectPath
			constexpr auto Mesh = 0x7e8; // Size: 8, Type: struct USkeletalMeshComponent*
			constexpr auto OriginalMesh = 0x7f0; // Size: 8, Type: struct USkeletalMesh*
			constexpr auto OriginalAnimBP = 0x7f8; // Size: 8, Type: UWeaponAnimInstance*
			constexpr auto AkAudioComponent = 0x800; // Size: 8, Type: struct UAkComponent*
			constexpr auto SolarAkGameObject = 0x808; // Size: 8, Type: struct USolarAkGameObject*
			constexpr auto SoundFireAutoCount = 0x810; // Size: 4, Type: int32_t
			constexpr auto bTriggerSoundFireAuto = 0x814; // Size: 1, Type: bool
			constexpr auto OldSoundFireAutoCount = 0x818; // Size: 4, Type: int32_t
			constexpr auto bTriggerSoundB9A04Skill = 0x81c; // Size: 1, Type: bool
			constexpr auto bTriggerSoundFireBurst = 0x81d; // Size: 1, Type: bool
			constexpr auto SkillFireCount = 0x820; // Size: 4, Type: int32_t
			constexpr auto SingleFireCount = 0x824; // Size: 4, Type: int32_t
			constexpr auto FireOverloadCount = 0x828; // Size: 4, Type: int32_t
			constexpr auto FireLastCount = 0x82c; // Size: 4, Type: int32_t
			constexpr auto OverrideBullet = 0x890; // Size: 24, Type: struct FOverrideBulletStruct
			constexpr auto bLoadInitAssets = 0x8a8; // Size: 1, Type: bool
			constexpr auto bLoadAllCfgAssets = 0x8a9; // Size: 1, Type: bool
			constexpr auto FireHitVerifyMap = 0x8b0; // Size: 80, Type: struct TMap<struct FFireUniqueID, float>
			constexpr auto bDetectedEnemy = 0x908; // Size: 1, Type: bool
			constexpr auto GatlingOverHeatPSCs = 0x910; // Size: 16, Type: struct TArray<struct UParticleSystemComponent*>
			constexpr auto bTracingAimTarget = 0x920; // Size: 1, Type: bool
			constexpr auto SpecialFireChargeMaterial = 0x930; // Size: 8, Type: struct UMaterialInterface*
			constexpr auto SpecialFireChargeColorMap = 0x938; // Size: 80, Type: struct TMap<int32_t, struct FColor>
			constexpr auto bPerspectiveForReplay = 0x988; // Size: 1, Type: bool
			constexpr auto CurrentSpreadState = 0x9b0; // Size: 1, Type: enum class ESolarWeaponSpreadState
			constexpr auto ContinuousAddSpreadByFireCount = 0x9b4; // Size: 4, Type: int32_t
			constexpr auto bLastAddSpreadByFireIsHipFire = 0x9b8; // Size: 1, Type: bool
			constexpr auto LastAddSpreadByFireFireMode = 0x9b9; // Size: 1, Type: int8_t
			constexpr auto LastAddSpreadByFireTime = 0x9bc; // Size: 4, Type: float
			constexpr auto SpreadPrepareTimer = 0x9c0; // Size: 4, Type: float
			constexpr auto PendingBaseSpread = 0x9c4; // Size: 4, Type: float
			constexpr auto TargetBaseSpread = 0x9c8; // Size: 4, Type: float
			constexpr auto PendingAddSpread = 0x9cc; // Size: 4, Type: float
			constexpr auto TargetAddSpread = 0x9d0; // Size: 4, Type: float
			constexpr auto AimHitResult = 0xa00; // Size: 136, Type: struct FHitResult
	}
} 
